#!/bin/bash
# OAuth Caddy Setup Utility

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

usage() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  --domain DOMAIN        Your domain name (e.g., example.com)"
    echo "  --email EMAIL          Your email for Let's Encrypt"
    echo "  --backend-port PORT    Backend service port (default: 8080)"
    echo "  --google-client-id ID  Google OAuth client ID"
    echo "  --google-secret SECRET Google OAuth client secret"
    echo "  --github-client-id ID  GitHub OAuth client ID"
    echo "  --github-secret SECRET GitHub OAuth client secret"
    echo "  --help                 Show this help"
    echo
    echo "Example:"
    echo "  $0 --domain lab.example.com --email admin@example.com \\"
    echo "     --google-client-id 123.apps.googleusercontent.com \\"
    echo "     --google-secret GOCSPX-xyz \\"
    echo "     --github-client-id Ov23xyz \\"
    echo "     --github-secret abc123"
    exit 1
}

generate_secret() {
    openssl rand -hex 16
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --domain)
            DOMAIN="$2"
            shift 2
            ;;
        --email)
            EMAIL="$2"
            shift 2
            ;;
        --backend-port)
            BACKEND_PORT="$2"
            shift 2
            ;;
        --google-client-id)
            GOOGLE_CLIENT_ID="$2"
            shift 2
            ;;
        --google-secret)
            GOOGLE_SECRET="$2"
            shift 2
            ;;
        --github-client-id)
            GITHUB_CLIENT_ID="$2"
            shift 2
            ;;
        --github-secret)
            GITHUB_SECRET="$2"
            shift 2
            ;;
        --help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Validate required parameters
if [ -z "$DOMAIN" ] || [ -z "$EMAIL" ]; then
    echo -e "${RED}Error: --domain and --email are required${NC}"
    usage
fi

BACKEND_PORT=${BACKEND_PORT:-8080}

echo -e "${BLUE}=== OAuth Caddy Configuration Setup ===${NC}"
echo "Domain: $DOMAIN"
echo "Email: $EMAIL"
echo "Backend Port: $BACKEND_PORT"
echo

# Generate cookie secret
COOKIE_SECRET=$(generate_secret)

# Configure Caddyfile
echo -e "${YELLOW}Configuring Caddy...${NC}"
sed -e "s/YOUR_EMAIL@example.com/$EMAIL/g" \
    -e "s/YOUR_DOMAIN.com/$DOMAIN/g" \
    -e "s/YOUR_BACKEND_PORT/$BACKEND_PORT/g" \
    /etc/caddy/Caddyfile.template > /etc/caddy/Caddyfile

# Configure Google OAuth if credentials provided
if [ ! -z "$GOOGLE_CLIENT_ID" ] && [ ! -z "$GOOGLE_SECRET" ]; then
    echo -e "${YELLOW}Configuring Google OAuth...${NC}"
    sed -e "s|YOUR_BACKEND_PORT|$BACKEND_PORT|g" \
        -e "s/GENERATE_32_CHAR_HEX_SECRET/$COOKIE_SECRET/g" \
        -e "s/YOUR_GOOGLE_CLIENT_ID/$GOOGLE_CLIENT_ID/g" \
        -e "s/YOUR_GOOGLE_CLIENT_SECRET/$GOOGLE_SECRET/g" \
        -e "s/YOUR_DOMAIN.com/$DOMAIN/g" \
        /etc/oauth2-proxy/google.cfg.template > /etc/oauth2-proxy/google.cfg
else
    echo -e "${YELLOW}Skipping Google OAuth (credentials not provided)${NC}"
fi

# Configure GitHub OAuth if credentials provided
if [ ! -z "$GITHUB_CLIENT_ID" ] && [ ! -z "$GITHUB_SECRET" ]; then
    echo -e "${YELLOW}Configuring GitHub OAuth...${NC}"
    sed -e "s|YOUR_BACKEND_PORT|$BACKEND_PORT|g" \
        -e "s/GENERATE_32_CHAR_HEX_SECRET/$COOKIE_SECRET/g" \
        -e "s/YOUR_GITHUB_CLIENT_ID/$GITHUB_CLIENT_ID/g" \
        -e "s/YOUR_GITHUB_CLIENT_SECRET/$GITHUB_SECRET/g" \
        -e "s/YOUR_DOMAIN.com/$DOMAIN/g" \
        /etc/oauth2-proxy/github.cfg.template > /etc/oauth2-proxy/github.cfg
else
    echo -e "${YELLOW}Skipping GitHub OAuth (credentials not provided)${NC}"
fi

# Create systemd services for oauth2-proxy
echo -e "${YELLOW}Creating systemd services...${NC}"

# Google OAuth service
if [ -f "/etc/oauth2-proxy/google.cfg" ]; then
    cat > /etc/systemd/system/oauth2-proxy-google.service << EOF
[Unit]
Description=OAuth2 Proxy for Google
After=network.target

[Service]
Type=simple
User=www-data
Group=www-data
ExecStart=/usr/local/bin/oauth2-proxy --config=/etc/oauth2-proxy/google.cfg
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
fi

# GitHub OAuth service
if [ -f "/etc/oauth2-proxy/github.cfg" ]; then
    cat > /etc/systemd/system/oauth2-proxy-github.service << EOF
[Unit]
Description=OAuth2 Proxy for GitHub
After=network.target

[Service]
Type=simple
User=www-data
Group=www-data
ExecStart=/usr/local/bin/oauth2-proxy --config=/etc/oauth2-proxy/github.cfg
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
fi

# Reload systemd and enable services
systemctl daemon-reload

if [ -f "/etc/systemd/system/oauth2-proxy-google.service" ]; then
    systemctl enable oauth2-proxy-google
    systemctl start oauth2-proxy-google
    echo -e "${GREEN}✓ Google OAuth2 proxy enabled and started${NC}"
fi

if [ -f "/etc/systemd/system/oauth2-proxy-github.service" ]; then
    systemctl enable oauth2-proxy-github
    systemctl start oauth2-proxy-github
    echo -e "${GREEN}✓ GitHub OAuth2 proxy enabled and started${NC}"
fi

# Restart Caddy
systemctl restart caddy
echo -e "${GREEN}✓ Caddy restarted${NC}"

echo
echo -e "${GREEN}✅ OAuth Caddy setup complete!${NC}"
echo
echo "Next steps:"
echo "1. Configure your OAuth applications:"
echo "   - Google: https://console.developers.google.com/"
echo "   - GitHub: https://github.com/settings/developers"
echo "2. Set redirect URLs to: https://$DOMAIN/oauth2/callback"
echo "3. Test your setup at: https://$DOMAIN/login/google or https://$DOMAIN/login/github"